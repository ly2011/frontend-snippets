{
  "Import React": {
    "prefix": "impr",
    "body": [
      "import React from 'react'\n"
    ],
    "description": "Import React"
  },
  "Import React and Component": {
    "prefix": "impc",
    "body": [
      "import { Component } from 'react'\n"
    ],
    "description": "Import { Component }"
  },
  "Import ReactDOM": {
    "prefix": "imprd",
    "body": [
      "import ReactDOM from 'react-dom'\n"
    ],
    "description": "Import ReactDOM"
  },
  "Import { useState }": {
    "prefix": "imps",
    "body": [
      "import { useState } from 'react'\n"
    ],
    "description": "Import { useState }"
  },
  "Import { useState, useEffect }": {
    "prefix": "impse",
    "body": [
      "import { useState, useEffect } from 'react'\n"
    ],
    "description": "Import { useState, useEffect }"
  },
  "Import PropTypes": {
    "prefix": "impt",
    "body": [
      "import PropTypes from 'prop-types'\n"
    ],
    "description": "Import PropTypes"
  },
  "Class Component": {
    "prefix": "cc",
    "body": [
      "class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/ig}} extends Component {",
      "\tstate = { $2 }",
      "\trender() {",
      "\t\treturn ($0)",
      "\t}",
      "}",
      " ",
      "export default ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/ig}}"
    ],
    "description": "Class Component"
  },
  "Stateless Function Component": {
    "prefix": ["sfc", "functionComp"],
    "body": [
      "const ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/ig}} = (${2:props}) => {",
      "\treturn ($0)",
      "}",
      " ",
      "export default ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/ig}}"
    ],
    "description": "Stateless Function Component"
  },
  "componentDidMount": {
    "prefix": ["cdm", "didMount"],
    "body": [
      "componentDidMount() {",
      "\t$0",
      "}"
    ],
    "description": "componentDidMount"
  },
  "componentWillMount": {
    "prefix": ["cwm", "willMount"],
    "body": [
      "//WARNING! To be deprecated in React v17. Use componentDidMount instead.", "componentWillMount() {",
      "\t$0",
      "}"
    ],
    "description": "componentWillMount"
  },
  "componentWillReceiveProps": {
    "prefix": ["cwrp", "willReceive"],
    "body": [
      "//WARNING! To be deprecated in React v17. Use new lifecycle static getDerivedStateFromProps instead.",
      "componentWillReceiveProps(nextProps) {", 
      "\t$0", 
      "}"
    ],
    "description": "componentWillReceiveProps"
  },
  "getDerivedStateFromProps": {
    "prefix": ["gds", "getDerived"],
    "body": ["static getDerivedStateFromProps(nextProps, prevState) {", "\t$0", "}"],
    "description": "getDerivedStateFromProps"
  },

  "shouldComponentUpdate": {
    "prefix": ["scu", "shouldComp"],
    "body": ["shouldComponentUpdate(nextProps, nextState) {", "\t$0", "}"],
    "description": "shouldComponentUpdate"
  },

  "componentWillUpdate": {
    "prefix": ["cwu", "willUpdate"],
    "body": ["//WARNING! To be deprecated in React v17. Use componentDidUpdate instead.", "componentWillUpdate(nextProps, nextState) {", "\t$0", "}"],
    "description": "componentWillUpdate"
  },

  "componentDidUpdate": {
    "prefix": ["didUpdate"],
    "body": ["componentDidUpdate(prevProps, prevState) {", "\t$0", "}"],
    "description": "componentDidUpdate"
  },

  "componentWillUnmount": {
    "prefix": ["willUnmount", "unmount"],
    "body": ["componentWillUnmount() {", "\t$0", "}"],
    "description": "componentWillUnmount"
  },

  "componentDidCatch": {
    "prefix": ["didCatch"],
    "body": ["componentDidCatch(error, info) {", "\t$0", "}"],
    "description": "componentDidCatch"
  },

  "getSnapshotBeforeUpdate": {
    "prefix": ["beforeUpdate"],
    "body": ["getSnapshotBeforeUpdate(prevProps, prevState) {", "\t$0", "}"],
    "description": "getSnapshotBeforeUpdate"
  },
  "render": {
    "prefix": ["ren", "render"],
    "body": ["render() {", "\treturn (", "\t\t $0", "\t)", "}"],
    "description": "render"
  },
  "setState": {
    "prefix": ["setState"],
    "body": ["this.setState({ $1: $2 })"],
    "description": "setState"
  },
  "Functional setState": {
    "prefix": ["setStateCallback"],
    "body": ["this.setState(prevState => {", "\treturn { $1: prevState.$1 }", "})"],
    "description": "Functional setState"
  },
  "useState": {
    "prefix": "useState",
    "body": ["const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($2)"],
    "description": "useState Hook"
  },
  "useEffect": {
    "prefix": ["uef", "useEffect"],
    "body": [
      "useEffect(() => {",
      "\t$1",
      "}, []"
    ],
    "description": "useEffect Hook"
  }
}